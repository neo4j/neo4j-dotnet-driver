openapi: 3.0.3
info:
  title: Benchkit Backend API
  description: |-
    Unified definition of endpoints of the benchmark tool for Neo4j drivers.

    This endpoints are consumed by benchkit, thus this should be implemented 
    following the correct form and behaviour for useful benchmark results.
  contact:
    name: Neo4j Drivers Team Issues
    url: https://github.com/neo4j-drivers/benchkit/issues
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 5.x
tags:
  - name: workload
    description: Define and run workloads in the Neo4j Driver.
paths:
  /workload:
    post:
      tags:
        - workload
      summary: Creates a driver workload.
      description: |-
        This endpoint should save the workload in memory for future execution.
        Any driver method should called for handling this request.
      operationId: createWorkload
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              "$ref": "#/components/schemas/Workload"

      responses:
        '201':
          description: Workload created
          headers:
            location:
              description: Path for the workload
              schema:
                type: string
        '400':
          description: For invalid payload
        '500':
          description: For backend errors
    put:
      tags:
        - workload
      summary: Execute supplied drivers workload.
      description: |-
        This endpoint should run the workload supplied on the body.
        The workload is ephemeral, so it should not be store future requests.
        This is endpoint can be used for test multiple users running workloads
        which don't have big definition objects.

        Drivers should load all the records to memory and then discard.
      operationId: executeSuppliedWorkload
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              "$ref": "#/components/schemas/Workload"

      responses:
        '204':
          description: Workload executed.
        '400':
          description: For invalid payload
        '500':
          description: For backend errors
  /workload/{workloadId}:
    parameters:
      - name: workloadId
        in: path
        required: true
        schema:
          type: 'string'
    get:
      tags:
        - workload
      summary: Executes the given workload.
      description: |-
        Drivers should load all the records to memory and then discard.
      responses:
        '204':
          description: Workload executed.
        '404':
          description: Workload not found.
        '500':
          description: For backend errors
    patch:
      tags:
        - workload
      summary: Patchs a driver workload.
      description: |-
        This endpoint should save the workload in memory for future execution.
        Any driver method should called for handling this request.
      operationId: patchWorkload
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              "$ref": "#/components/schemas/WorkloadPatch"

      responses:
        '200':
          description: Workload patched
        '400':
          description: For invalid payload
        '500':
          description: For backend errors
    delete:
      tags:
        - workload
      summary: Deletes a driver workload.
      description: |-
        This endpoint should delete the workload from memory.
        Ongoing executions should not be canceled or stoped if any.
      operationId: deleteWorkload
      responses:
        '204':
          description: Workload deleted.
        '404':
          description: Workload not found.
        '500':
          description: For backend errors
components:
  schemas:
    WorkloadPatch:
      type: object
      description: Describes a patch for driver workload
      properties:
        method:
          type: string
          description: |-
            Method which should be called in the driver to execute workload.
          enum:
            - executeQuery
            - sessionRun
            - executeRead
            - executeWrite
        database:
          type: string
          description: |-
            Database which the workload will operate on.
          default: ""
        routing:
          type: string
          description: |-
            The routing/access mode configuration defined in executeQuery method and session creation.
          default: WRITE
          enum:
            - WRITE
            - READ
        mode:
          type: string
          description: |-
            Select the order the queries will be run. 
            
            * `sequentialSessions` for running queries in multiple sessions in sequence.
            * `sequentialTransactions` for running queries in multiple transactions in sequence in the same session. Not compatible with 'executeQuery' mode.
            * `sequentialQueries` for running multiple queres in sequence in the same transaction. Not compatible with 'executeQuery' and 'sessionRun' modes.
            * `parallelSessions` for running multiple queries in parallel in different sessions.
          default: sequentialSessions
          enum:
            - sequentialQueries
            - sequentialTransactions
            - sequentialSessions
            - parallelSessions
        queries:
          type: array
          description: List of queries executed in the workload.
          items:
            type: object
            required:
              - text
            properties:
              text:
                description: The query text
                type: string
              parameters:
                description: |-
                  The query parameters. This should be passed to
                  drivers as it is since only basic types will be used.
                type: object
    Workload:
      type: object
      description: Describes a driver workload
      allOf:
        - $ref: '#/components/schemas/WorkloadPatch'
        - type: object
          required:
            - queries
            - method
